if (confirm('Do you want to start with the obo')) {
    // Save it!
    n1();
  } else {
    // Do nothing!
    console.log('Fine');
  }



//Obo 3.0 aka smooth operator
function n1() {
    (function(){    var speed=2;    var x=window.innerWidth/2;    var y=window.innerHeight/2;    var obos=[];    var keys={};    var colors=['red','yellow','green','lightblue','blue','purple','pink'];    var colorIndex=0;    var oboStyle={position:'fixed',zIndex:10000,width:'20px',height:'20px',background:colors[colorIndex]};    function update(){        if(keys['ArrowUp']){            y-=speed;            obos.forEach(function(obo){                obo.style.top=obo.getBoundingClientRect().top-speed+'px';            });        }        if(keys['ArrowDown']){            y+=speed;            obos.forEach(function(obo){                obo.style.top=obo.getBoundingClientRect().top+speed+'px';            });        }        if(keys['ArrowLeft']){            x-=speed;            obos.forEach(function(obo){                obo.style.left=obo.getBoundingClientRect().left-speed+'px';            });        }        if(keys['ArrowRight']){            x+=speed;            obos.forEach(function(obo){                obo.style.left=obo.getBoundingClientRect().left+speed+'px';            });        }        cursor.style.left=x+'px';        cursor.style.top=y+'px';        requestAnimationFrame(update);    }    function keydownHandler(e){        keys[e.key]=true;        switch(e.key){            case'l':            case'L':                var obo=document.createElement('div');                Object.assign(obo.style,oboStyle);                obo.className='obo';                obo.style.left=window.innerWidth/2+'px';                obo.style.top=window.innerHeight/2+'px';                document.body.appendChild(obo);                obos.push(obo);                break;            case' ':                var element=document.elementFromPoint(x,y);                if(element&&element.className==='obo'){                    colorIndex=(colorIndex+1)%colors.length;                    element.style.background=colors[colorIndex];                    e.preventDefault();                }                break;        }    }    function keyupHandler(e){        keys[e.key]=false;    }    var cursor=document.createElement('div');    Object.assign(cursor.style,oboStyle);    cursor.className='obo';    document.body.appendChild(cursor);    window.addEventListener('keydown',keydownHandler);    window.addEventListener('keyup',keyupHandler);    update();})();
}

//Bobo wish.com
function n2() {
    (function(){    var rocket = document.createElement('div');    rocket.style.width = '0px';    rocket.style.height = '0px';    rocket.style.borderLeft = '20px solid transparent';    rocket.style.borderRight = '20px solid transparent';    rocket.style.borderBottom = '40px solid black';    rocket.style.position = 'fixed';    rocket.style.left = '50%';    rocket.style.bottom = '0px';    document.body.appendChild(rocket);    var moveInterval;    var moveSpeed = 5;    var moveDuration = 1000;    var moveStartTime;    var moveDirection;    var trailInterval;    var trailDuration = 1000;    var trailStartTime;    var trailOpacity = 1;    var projectileInterval;    var projectileSpeed = 10;    var projectileDuration = 1000;    var projectileStartTime;    var projectileDirection;    var enemies = [];    function moveRocket() {        if (moveDirection === 'forward') {            rocket.style.bottom = parseInt(rocket.style.bottom) + moveSpeed + 'px';        } else if (moveDirection === 'left') {            rocket.style.left = parseInt(rocket.style.left) - moveSpeed + 'px';        } else if (moveDirection === 'right') {            rocket.style.left = parseInt(rocket.style.left) + moveSpeed + 'px';        }        if (new Date().getTime() - moveStartTime > moveDuration) {            clearInterval(moveInterval);        }    }    function startMove(direction) {        if (!moveInterval) {            moveStartTime = new Date().getTime();            moveDirection = direction;            moveInterval = setInterval(moveRocket, 10);        }    }    function stopMove() {        clearInterval(moveInterval);        moveInterval = null;        setTimeout(function() {            startTrail();        }, trailDuration);    }    function startTrail() {        if (!trailInterval) {            trailStartTime = new Date().getTime();            trailInterval = setInterval(function() {                trailOpacity -= 0.01;                if (trailOpacity < 0) {                    clearInterval(trailInterval);                    trailInterval = null;                    trailOpacity = 1;                } else {                    var trailElement = document.createElement('div');                    trailElement.style.width = '10px';                    trailElement.style.height = '10px';                    trailElement.style.backgroundColor = 'black';                    trailElement.style.opacity = trailOpacity.toString();                    trailElement.style.position = 'fixed';                    trailElement.style.left = parseInt(rocket.style.left) + 20 + 'px';                    trailElement.style.bottom = parseInt(rocket.style.bottom) + 40 + 'px';                    document.body.appendChild(trailElement);                }            }, 10);        }    }    function startProjectile(direction) {        if (!projectileInterval) {            projectileStartTime = new Date().getTime();            projectileDirection = direction;            projectileInterval = setInterval(function() {                if (projectileDirection === 'up') {                    rocketProjectile.style.bottom =                        parseInt(rocketProjectile.style.bottom) + projectileSpeed + 'px';                } else if (projectileDirection === 'left') {                    rocketProjectile.style.left =                        parseInt(rocketProjectile.style.left) - projectileSpeed + 'px';                } else if (projectileDirection === 'right') {                    rocketProjectile.style.left =                        parseInt(rocketProjectile.style.left) + projectileSpeed + 'px';                }                for (var i=0; i<enemies.length; i++) {                    if (collisionDetection(rocketProjectile, enemies[i])) {                        destroyEnemy(enemies[i]);                        break;                    }                }                if (new Date().getTime() - projectileStartTime > projectileDuration ||                        parseInt(rocketProjectile.style.bottom) > window.innerHeight ||                        parseInt(rocketProjectile.style.left) < 0 ||                        parseInt(rocketProjectile.style.left) > window.innerWidth) {                    clearInterval(projectileInterval);                    document.body.removeChild(rocketProjectile);                    rocketProjectile = null;                }            }, 10);            var rocketProjectile = document.createElement('div');            rocketProjectile.style.width = '5px';            rocketProjectile.style.height = '5px';            rocketProjectile.style.backgroundColor = '#000000';            rocketProjectile.style.position = 'fixed';            rocketProjectile.style.left = parseInt(rocket.style.left) + 20 + 'px';            rocketProjectile.style.bottom = parseInt(rocket.style.bottom) + 40 + 'px';            document.body.appendChild(rocketProjectile);        }    }    function spawnEnemy() {        var enemy = document.createElement('div');        enemy.style.width = '20px';        enemy.style.height = '20px';        enemy.style.backgroundColor = 'red';        enemy.style.position = 'fixed';        enemy.style.left = Math.floor(Math.random() * window.innerWidth) + 'px';        enemy.style.top = Math.floor(Math.random() * window.innerHeight) + 'px';        document.body.appendChild(enemy);        enemies.push(enemy);    }    function destroyEnemy(enemy) {        var explosionElement = document.createElement('div');        explosionElement.style.width = '20px';        explosionElement.style.height = '20px';        explosionElement.style.backgroundColor = '#ff6600';        explosionElement.style.position = 'fixed';        explosionElement.style.left = parseInt(enemy.style.left) + 'px';        explosionElement.style.top = parseInt(enemy.style.top) + 'px';        document.body.appendChild(explosionElement);        setTimeout(function() {            document.body.removeChild(explosionElement);            enemies.splice(enemies.indexOf(enemy), 1);            document.body.removeChild(enemy);            if (enemies.length < 3) {                spawnEnemy();            }        }, 1000);    }    function collisionDetection(obj1, obj2) {        var obj1Rect = obj1.getBoundingClientRect();        var obj2Rect = obj2.getBoundingClientRect();        return !(obj1Rect.right < obj2Rect.left ||                 obj1Rect.left > obj2Rect.right ||                 obj1Rect.bottom < obj2Rect.top ||                 obj1Rect.top > obj2Rect.bottom);    }    document.addEventListener('keydown', function(event) {        if (event.key === 'w') {            startMove('forward');        } else if (event.key === 'a') {            startMove('left');        } else if (event.key === 'd') {            startMove('right');        } else if (event.key === ' ') {            startProjectile();        }    });    document.addEventListener('keyup', function(event) {        if (event.key === 'w' || event.key === 'a' || event.key === 'd') {            stopMove();        }    });    spawnEnemy();})();
    
}
var AddIDX = 0


function NewAd() {
    AddIDX = AddIDX + 1
}

const OurAds = ["Ad1.png", "Ad2.png"];

setInterval(myFunction, 10000);


